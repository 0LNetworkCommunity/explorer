# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface AbstractTransaction {
  version: BigInt!
  hash: Bytes!
}

type Module {
  address: String!
  name: String!
  functions: [String!]!
}

type SlowWallet {
  transferred: Decimal!
  unlocked: Decimal!
}

type GqlUserTransactionDeprecated {
  hash: String!
  version: Float!
  gasUsed: Float!
  success: Boolean!
  vmStatus: String!
  sender: String!
  sequenceNumber: Float!
  maxGasAmount: Float!
  gasUnitPrice: Float!
  expirationTimestamp: Float!
  moduleAddress: String!
  moduleName: String!
  functionName: String!
  arguments: String!
  timestamp: Float!
}

type UserTransactionCollection {
  size: Float!
  items: [GqlUserTransactionDeprecated!]!
}

type Voucher {
  address: String!
  epoch: Float!
}

type Vouches {
  valid: Float!
  total: Float!
  compliant: Boolean!
  vouchers: [Voucher!]!
}

type ValidatorCurrentBid {
  currentBid: Float!
  expirationEpoch: Float!
}

type ValidatorGrade {
  compliant: Boolean!
  proposedBlocks: Float!
  failedBlocks: Float!
}

type Validator {
  inSet: Boolean!
  index: BigInt!
  address: String!
  city: String
  country: String
  votingPower: BigInt!
  grade: ValidatorGrade
  vouches: Vouches
  currentBid: ValidatorCurrentBid
  balance: Float
  unlocked: Float
  auditQualification: [String!]
}

type Account {
  address: Bytes!
  balance: Decimal
  slowWallet: SlowWallet
  movements(first: Int! = 10, after: String, order: OrderDirection! = ASC): PaginatedMovements!
}

enum OrderDirection {
  ASC
  DESC
}

type PageInfo {
  prevCursor: String
  hasNextPage: Boolean!
}

type Movement {
  amount: Decimal!
  unlockedAmount: Decimal!
  lockedAmount: Decimal!
  balance: Decimal!
  lockedBalance: Decimal!
  version: BigInt!
  transaction: AbstractTransaction!
}

type MovementEdge {
  cursor: String!
  node: Movement!
}

type PaginatedMovements {
  edges: [MovementEdge!]
  totalCount: Float!
  pageInfo: PageInfo!
}

type CumulativeShare {
  amount: Float!
  percentage: Float!
}

type TopAccount {
  rank: Int!
  address: String!
  publicName: String!
  balance: Float!
  cumulativeShare: CumulativeShare!
}

type CommunityWallet {
  rank: Float!
  address: String!
  name: String
  description: String
  balance: Float!
}

type CommunityWalletStats {
  totalBalance: Float!
  totalPaid: Float!
  totalPending: Float!
  totalVetoed: Float!
}

type Payment {
  deadline: String!
  payee: String!
  value: Float!
  description: String!
  status: String!
}

type CommunityWalletPayments {
  address: String!
  name: String
  paid: [Payment!]!
  pending: [Payment!]!
  vetoed: [Payment!]!
}

type CommunityWalletDetails {
  address: String!
  name: String
  isMultiAction: Boolean!
  threshold: [Float!]
  totalPaid: Float!
  balance: Float!
  payees: Float!
}

type Transaction {
  hash: Bytes!
  sender: Bytes!
  status: TransactionStatus!
  onChainTransaction: AbstractTransaction
}

enum TransactionStatus {
  UNKNOWN
  ON_CHAIN
  EXPIRED
}

type UserTransaction implements AbstractTransaction {
  version: BigInt!
  hash: Bytes!
  timestamp: BigInt!
  success: Boolean!
  sender: Bytes!
  moduleAddress: Bytes!
  moduleName: String!
  functionName: String!
  arguments: String!
  gasUsed: BigInt!
  gasUnitPrice: BigInt!
}

type BlockMetadataTransaction implements AbstractTransaction {
  version: BigInt!
  hash: Bytes!
  epoch: BigInt!
  timestamp: BigInt!
}

type ScriptUserTransaction implements AbstractTransaction {
  version: BigInt!
  hash: Bytes!
  timestamp: BigInt!
  success: Boolean!
  sender: Bytes!
}

type GenesisTransaction implements AbstractTransaction {
  version: BigInt!
  hash: Bytes!
}

type Info {
  latestStableVersion: BigInt
  latestStableTimestamp: BigInt
}

type Node {
  latitude: Float!
  longitude: Float!
}

"""Buffer"""
scalar Bytes

"""BigInt"""
scalar BigInt

"""Decimal"""
scalar Decimal

type Query {
  userTransactionsCount: Int!
  userTransactions(limit: Int!, offset: Int!, order: String!): UserTransactionCollection!
  modules: [Module!]!
  info: Info!
  account(address: Bytes!): Account
  getTopAccounts(limit: Float! = 100): [TopAccount!]!
  getValidators: [Validator!]!
  getCommunityWallets: [CommunityWallet!]!
  getCommunityWalletsStats: CommunityWalletStats!
  getCommunityWalletsPayments: [CommunityWalletPayments!]!
  getCommunityWalletsDetails: [CommunityWalletDetails!]!
  walletTransactions(address: Bytes!): [Transaction!]!
  transaction(hash: Bytes!): Transaction!
  nodes: [Node!]
}

type Mutation {
  newTransaction(signedTransaction: Bytes!): Transaction!
  walletSubscribe(walletAddress: Bytes!, deviceToken: String!, deviceType: DeviceType!): Boolean!
}

enum DeviceType {
  IOS
  ANDROID
}

type Subscription {
  walletMovement(address: Bytes!): String!
  walletTransaction(address: Bytes!): Transaction!
}